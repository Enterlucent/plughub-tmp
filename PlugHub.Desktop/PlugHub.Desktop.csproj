<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <!--If you are willing to use Windows/MacOS native APIs you will need to create 3 projects.
    One for Windows with net8.0-windows TFM, one for MacOS with net8.0-macos and one with net8.0 TFM for Linux.-->
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>

    <PublishSingleFile>true</PublishSingleFile>
    <SelfContained>true</SelfContained>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
  </PropertyGroup>

  <PropertyGroup>
    <ApplicationManifest>app.manifest</ApplicationManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia.Desktop" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PlugHub\PlugHub.csproj" />
  </ItemGroup>



  <!-- Custom Official Plugin Handling -->
  <ItemGroup>
    <Content Update="..\PlugHub.Plugins\**">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
  </ItemGroup>

  <PropertyGroup>
    <PluginsRoot>..\PlugHub.Plugins\</PluginsRoot>
  </PropertyGroup>

  <Target Name="BuildReleasePlugins" BeforeTargets="Publish">
    <ItemGroup>
      <PluginProjects Include="..\PlugHub.Plugins\*\*.csproj" />
    </ItemGroup>
    <MSBuild
      Projects="@(PluginProjects)"
      Targets="Build"
      Properties="Configuration=Release" />
  </Target>

  <Target Name="BuildConfigurationPlugins" BeforeTargets="Build">
    <ItemGroup>
      <PluginProjects Include="..\PlugHub.Plugins\*\*.csproj" />
    </ItemGroup>
    <MSBuild
      Projects="@(PluginProjects)"
      Targets="Build"
      Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="CopyPluginArtifactsOnBuild" AfterTargets="Build" DependsOnTargets="BuildConfigurationPlugins">
    <ItemGroup>
      <PluginArtifactsRaw
        Include="..\PlugHub.Plugins\*\bin\$(Configuration)\**\*"
        Exclude="..\PlugHub.Plugins\*\bin\$(Configuration)\**\PlugHub.Shared.dll;..\PlugHub.Plugins\*\bin\$(Configuration)\**\PlugHub.Shared.pdb" />
    </ItemGroup>
    <ItemGroup>
      <PluginArtifacts
        Include="@(PluginArtifactsRaw)">
        <PluginName>$([System.Text.RegularExpressions.Regex]::Match('%(PluginArtifactsRaw.Identity)', 'PlugHub\.Plugins\\([^\\]+)').Groups[1].Value)</PluginName>
      </PluginArtifacts>
    </ItemGroup>
    <Copy
      SourceFiles="@(PluginArtifacts)"
      DestinationFiles="@(PluginArtifacts->'$(OutputPath)Plugins\%(PluginName)\%(Filename)%(Extension)')"
      SkipUnchangedFiles="true" />
  </Target>

  <Target Name="CopyPluginArtifactsOnPublish" AfterTargets="Publish" DependsOnTargets="BuildReleasePlugins">
    <ItemGroup>
      <PluginArtifactsRaw
        Include="..\PlugHub.Plugins\*\bin\Release\**\PlugHub.Plugin.*.*"
        Exclude="..\PlugHub.Plugins\*\bin\Release\**\PlugHub.Shared.dll;..\PlugHub.Plugins\*\bin\Release\**\PlugHub.Shared.pdb" />
    </ItemGroup>
    <ItemGroup>
      <PluginArtifacts
        Include="@(PluginArtifactsRaw)">
        <PluginName>$([System.Text.RegularExpressions.Regex]::Match('%(PluginArtifactsRaw.Identity)', 'PlugHub\.Plugins\\([^\\]+)').Groups[1].Value)</PluginName>
      </PluginArtifacts>
    </ItemGroup>
    <Copy
      SourceFiles="@(PluginArtifacts)"
      DestinationFiles="@(PluginArtifacts->'$(PublishDir)Plugins\%(PluginName)\%(Filename)%(Extension)')"
      SkipUnchangedFiles="true" />
  </Target>

</Project>